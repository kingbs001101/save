import nidaqmx
import matplotlib.pyplot as plt
import time
import multiprocessing
import os
import sys
import openpyxl


def read_ai0_voltage(queue1):
    with nidaqmx.Task() as task0:
        task0.ai_channels.add_ai_voltage_chan("Dev1/ai0")
        
        while True:
            voltage_ai0 = task0.read()
            queue1.put(voltage_ai0)


def plot_ai0_data(queue1):
    Data_ai0 = []
    fig, ax_ai0 = plt.subplots()
    ax_ai0.set_xlabel('Sample')
    ax_ai0.set_ylabel('Voltage')
    ax_ai0.set_title('Voltage - AI0')

    while True:
        # start_time_1 = time.time()
        while not queue1.empty():
            voltage_ai0 = queue1.get()
            Data_ai0.append(voltage_ai0)
        
        
            ax_ai0.plot(Data_ai0, color='red')
            ax_ai0.set_xlim(len(Data_ai0) - 50, len(Data_ai0) + 50)
            plt.pause(0.0001)
            # print(time.time()-start_time_1)
            if not plt.fignum_exists(fig.number):
                sys.exit(0)
                break

def save_to_excel(queue1, lock):
    time.sleep(0.1)
    wb = openpyxl.Workbook()
    ws = wb.active
    filename = '0208_data.xlsx'
    directory = r'C:\Users\USER\Desktop\about Python\excel_data'
    full_path = os.path.join(directory, filename)
    ws.cell(row=1, column=1, value='Voltage')
    current_row = 2 

    while True:
        data_to_save = []

        while not queue1.empty():
            voltage_ai0 = queue1.get()
            data_to_save.append(voltage_ai0)

        with lock:
            for voltage in data_to_save:
                ws.cell(row=current_row, column=1, value=voltage)
                current_row += 1

            wb.save(full_path)

        time.sleep(0.1)


if __name__ == "__main__":
    queue1 = multiprocessing.Queue()
    lock = multiprocessing.Lock()

    process_1 = multiprocessing.Process(target=read_ai0_voltage, args=(queue1,))
    process_2 = multiprocessing.Process(target=plot_ai0_data, args=(queue1,))
    process_3 = multiprocessing.Process(target=save_to_excel, args=(queue1, lock))

    process_1.start()
    process_2.start()
    process_3.start()

    process_2.join()

    if not process_2.is_alive():
        process_1.terminate()
        process_3.terminate()
        process_1.join()
        process_3.join()

        print("모든 프로세스 종료")
